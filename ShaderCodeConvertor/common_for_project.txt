{
    fragmentContext.VertClipPos = CheckClipPos(input.Pos);
	UNPACK_VEC_22 (0, input, fragmentContext.UV0, fragmentContext.UV1);
	UNPACK_VEC_4  (1, input, fragmentContext.VertFog);
	UNPACK_VEC_31 (2, input, fragmentContext.VertWorldPos,	    fragmentContext.TangentToWorld[2].x);
	UNPACK_VEC_31 (3, input, fragmentContext.TangentToWorld[0], fragmentContext.TangentToWorld[2].y);
	UNPACK_VEC_31 (4, input, fragmentContext.TangentToWorld[1], fragmentContext.TangentToWorld[2].z);
},
{
    // sample stylized color
	#ifdef TERRAIN_MIXCOLOR
	    fragmentContext.VertStylizedColor = GetStylizedColor(fragmentContext.VertWorldPos);
	#endif
},
{
    #ifdef SHADING_QUALITY_HIGH
        half4 roughnessSample = calculatedMaterial.roughnessSample;
        half roughness = saturate(lerp(_Roughness1, _Roughness2, roughnessSample.r));
    #else
        half roughness = 0.999f;
    #endif    

    #ifndef SHADING_QUALITY_LOW
        half4 aoSample = calculatedMaterial.aoSample;
        half occlusion = CheapContrast(aoSample.r, _ColorAOContrast);
        // half occlusion = CheapContrast(normalDetailSample.a, _ColorAOContrast); // AO独立出来了
        half ao = aoSample.r;	
    #else
        half occlusion = 1.0f;
        half ao = 1.0f;
    #endif    
    
    half3 baseColor = lerp(baseColorSample.rgb * _ColorAO, baseColorSample.rgb, occlusion) * _ColorBrightness;
    half3 finalTangentNormal = normalize(BlendAngleCorrectNormals(baseTangentNormal, detailTangentNormal));
	half specular = _Specular;
}